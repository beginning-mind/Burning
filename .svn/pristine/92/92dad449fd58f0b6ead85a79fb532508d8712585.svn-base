//
//  CDIMClient.m
//  LeanChat
//
//  Created by lzw on 15/1/21.
//  Copyright (c) 2015年 AVOS. All rights reserved.
//

#import "CDIM.h"
#import "CDRoom.h"
#import "CDStorage.h"
#import "CDNotify.h"
#import "CDMacros.h"
#import "CDEmotionUtils.h"
#import "CDIMConfig.h"
#import "LCObjectHeader.h"
#import "CDMessage.h"
#import "PListFileHelper.h"
#import "CDChatRoomVC.h"

static CDIM *instance;
static NSMutableDictionary *cachedConvs;
static NSMutableDictionary *cachedUserDict;

@interface CDIMConfig ()

@property (nonatomic, readwrite) NSString *selfId;

@end

@interface CDIM () <AVIMClientDelegate, AVIMSignatureDataSource>

@property CDStorage *storage;

@property CDIMConfig *imConfig;

@property CDNotify *notify;

//@property (nonatomic, strong) NSMutableDictionary *cachedConvs;

@end

@implementation CDIM

#pragma mark - lifecycle

+ (instancetype)sharedInstance {
    if (instance == nil) {
        instance = [[CDIM alloc] init];
    }
    return instance;
}

- (instancetype)init {
    self = [super init];
    if (self) {
        _imClient = [[AVIMClient alloc] init];
        _imClient.delegate = self;
        /* 取消下面的注释，将对 im的 open ，start(create conv),kick,invite 操作签名，更安全
         可以从你的服务器获得签名，这里从云代码获取，需要部署云代码，https://github.com/leancloud/leanchat-cloudcode
         */
        //        _imClient.signatureDataSource=self;
        _storage = [CDStorage sharedInstance];
        _notify = [CDNotify sharedInstance];
        _imConfig = [CDIMConfig config];
        cachedConvs = [NSMutableDictionary dictionary];
        cachedUserDict = [NSMutableDictionary dictionary];
        [self updateConnectStatus];
    }
    return self;
}

- (void)dealloc {
    [_imClient removeObserver:self forKeyPath:@"status"];
}

- (void)openWithClientId:(NSString *)clientId callback:(AVIMBooleanResultBlock)callback {
    _selfId = clientId;
    _selfUser = [self.imConfig.userDelegate getUserById:clientId];
    [self.storage setupWithUserId:clientId];
    [_imClient openWithClientId:clientId callback:^(BOOL succeeded, NSError *error) {
        [self updateConnectStatus];
        if (callback) {
            callback(succeeded, error);
        }
    }];
}

- (void)closeWithCallback:(AVBooleanResultBlock)callback {
    [_imClient closeWithCallback:callback];
}

#pragma mark - conversation

- (void)fecthConvWithId:(NSString *)convid callback:(AVIMConversationResultBlock)callback {
    AVIMConversationQuery *q = [_imClient conversationQuery];
    q.cachePolicy = kAVCachePolicyIgnoreCache;
    [q whereKey:@"objectId" equalTo:convid];
    [q findConversationsWithCallback: ^(NSArray *objects, NSError *error) {
        if (error) {
            callback(nil, error);
        }
        else {
            callback([objects objectAtIndex:0], error);
        }
    }];
}

- (void)fetchConvWithMembers:(NSArray *)members type:(CDConvType)type callback:(AVIMConversationResultBlock)callback {
    AVIMConversationQuery *q = [_imClient conversationQuery];
    [q whereKey:AVIMAttr(CONV_TYPE) equalTo:@(type)];
    [q whereKey:CONV_MEMBERS_KEY containsAllObjectsInArray:members];//根据客户端创建者查找
    [q findConversationsWithCallback: ^(NSArray *objects, NSError *error) {
        if (error) {
            callback(nil, error);
        }
        else {
            if (objects.count > 0) {
                AVIMConversation *conv = [objects objectAtIndex:0];
//                NSMutableArray *conv = [objects mutableCopy];
                callback(conv, nil);
            }
            else {
                [self createConvWithMembers:members type:type callback:callback];
            }
        }
    }];
}

- (void)fetchConvWithMembers:(NSArray *)members callback:(AVIMConversationResultBlock)callback {
    [self fetchConvWithMembers:members type:CDConvTypeGroup callback:callback];
}

-(void)fetchGroupConvsWithClientId:(NSString *)clientId callback:(AVIMConversationsResultBlock)callback{
    AVIMConversationQuery *q = [_imClient conversationQuery];
    [q whereKey:AVIMAttr(CONV_TYPE) equalTo:@(CDConvTypeGroup)];
    NSArray *ids = @[clientId];
    [q whereKey:CONV_MEMBERS_KEY containsAllObjectsInArray:ids];
    [q findConversationsWithCallback: ^(NSArray *objects, NSError *error) {
        if (error) {
            callback(nil, error);
        }
        else {
            if (objects.count > 0) {
                NSMutableArray *conv = [objects mutableCopy];
                callback(conv, nil);
            }
        }
    }];
}

- (void)fetchConvsWithConvName:(NSString *)convName AndCreator:(NSString *)creator callback:(AVIMArrayResultBlock)callback {
    AVIMConversationQuery *q = [_imClient conversationQuery];
    [q whereKey:CONV_NAME equalTo:convName];
    [q whereKey:CONV_CLIENT_KEY equalTo:creator];
    [q findConversationsWithCallback: ^(NSArray *objects, NSError *error) {
        if (error) {
            callback(nil, error);
        }
        else {
            if (objects.count > 0) {
                NSMutableArray *conv = [objects mutableCopy];
                callback(conv, nil);
            } else {
                callback(nil, nil);
            }
        }
    }];
}


- (void)fetchSystemConvWithConvId:(NSString *)conversationId AndMemberId:(NSString *)memberId callback:(AVIMArrayResultBlock)callback {
    NSLog(@"convId: %@", conversationId);
    NSMutableArray *convArray = [[NSMutableArray alloc] init];
    for (NSString *convId in cachedConvs) {
        AVIMConversation *conv = [cachedConvs objectForKey:convId];
        NSDictionary *dict = conv.attributes;
        NSNumber *convType = [dict objectForKey:@"type"];
        
        NSArray *memberArr = conv.members;
        NSString *memberStr = [memberArr componentsJoinedByString:@","];
        NSRange range = [memberStr rangeOfString:memberId];
        
        if (convType.intValue == 2 && [conv.name isEqualToString:conversationId] && range.length !=0) {
            [convArray addObject:conv];
            break;
        }
    }
    callback([convArray copy], nil);
}


- (void)fetchConvWithOtherId:(NSString *)otherId callback:(AVIMConversationResultBlock)callback {
    NSMutableArray *array = [[NSMutableArray alloc] init];
    [array addObject:otherId];
    [self fetchConvWithMembers:array type:CDConvTypeGroup callback:callback];
}


- (void)createConvWithMembers:(NSArray *)members type:(CDConvType)type callback:(AVIMConversationResultBlock)callback {
    NSString *name = nil;
    if (type == CDConvTypeGroup) {
        name = [AVIMConversation nameOfUserIds:members];
    }
    [_imClient createConversationWithName:name clientIds:members attributes:@{ CONV_TYPE:@(type) } options:AVIMConversationOptionNone callback:callback];
}

- (void)findGroupedConvsWithBlock:(AVIMArrayResultBlock)block {
    AVIMConversationQuery *q = [_imClient conversationQuery];
    [q whereKey:AVIMAttr(CONV_TYPE) equalTo:@(CDConvTypeGroup)];
    [q whereKey:CONV_MEMBERS_KEY containedIn:@[self.selfId]];
    q.limit = 1000;
    [q findConversationsWithCallback:block];
}

- (void)updateConv:(AVIMConversation *)conv name:(NSString *)name attrs:(NSDictionary *)attrs callback:(AVIMBooleanResultBlock)callback {
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (name) {
        [dict setObject:name forKey:@"name"];
    }
    if (attrs) {
        [dict setObject:attrs forKey:@"attrs"];
    }
    [conv update:dict callback:callback];
}

- (void)deleteConvWithConvId:(NSString *)convId {
    [_storage deleteRoomByConvid:convId];
}

- (void)fetchConvsWithConvids:(NSSet *)convids
                     callback:(AVIMArrayResultBlock)callback {
    if (convids.count > 0) {
        AVIMConversationQuery *q = [_imClient conversationQuery];
        [q whereKey:@"objectId" containedIn:[convids allObjects]];
        q.limit = 1000;// default:10
        q.cacheMaxAge = 0;
        [q findConversationsWithCallback:callback];
    }
    else {
        callback([NSMutableArray array], nil);
    }
}


-(void)fecthAllMsgsWithType:(NSInteger)type
                   callback:(AVIMArrayResultBlock)callback{
    
}

- (void)fetchConvsWithArrayConvids:(NSArray *)convids
                     callback:(AVIMArrayResultBlock)callback {
    if (convids.count > 0) {
        AVIMConversationQuery *q = [_imClient conversationQuery];
        [q whereKey:@"objectId" containedIn:convids];
        q.limit = 1000;  // default limit:10
        [q findConversationsWithCallback:callback];
    }
    else {
        callback([NSMutableArray array], nil);
    }
}

- (void)fetchConvsWithLimit:(NSInteger)limit skip:(NSInteger)skip latitude:(double)latitude longitude:(double)longitude callback:(AVIMArrayResultBlock)callback {
    AVIMConversationQuery *q = [_imClient conversationQuery];
    
    [q orderByDescending:KEY_CREATED_AT];
     AVGeoPoint *userLocation =  [AVGeoPoint geoPointWithLatitude:latitude longitude:longitude];
    [q whereKey:AVIMAttr(CONV_TYPE) equalTo:@(CDConvTypeGroup)];
    //    [q whereKey:AVIMAttr(CONV_GEO_POINT) nearGeoPoint:userLocation];
    q.limit = limit;
    [q findConversationsWithCallback:callback];
}

-(void)fetchConvsWithSequenceNum:(NSInteger)sequenceNum callback:(AVIMArrayResultBlock)callback {
    AVIMConversationQuery *q = [_imClient conversationQuery];
    [q whereKey:AVIMAttr(@"sequenceNum") equalTo:@(sequenceNum)];
    [q whereKey:AVIMAttr(@"isDel") equalTo:@(0)];
    [q findConversationsWithCallback:callback];
}

#pragma mark - query msgs

- (NSArray *)queryMsgsWithConv:(AVIMConversation *)conv msgId:(NSString *)msgId maxTime:(int64_t)time limit:(int)limit error:(NSError **)theError {
    dispatch_semaphore_t sema = dispatch_semaphore_create(0);
    __block NSArray *result;
    __block NSError *blockError = nil;
    [conv queryMessagesBeforeId:msgId timestamp:time limit:limit callback: ^(NSArray *objects, NSError *error) {
        result = objects;
        blockError = error;
        dispatch_semaphore_signal(sema);
    }];
    dispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);
    *theError = blockError;
    if (blockError == nil) {
    }
    return result;
}

-(NSArray *)queryMsgsWithConvType:(NSInteger)convType{
    return  [self.storage getMsgsWithConvType:convType];
}


-(NSArray *)querySystemMsgs {
    return [self.storage getSystemMsgs];
}

-(void) deleteMsgWithConvid:(NSString *)convid {
    [self.storage deleteMsgsByConvid:convid];
}

#pragma mark - send or receive message

- (void)receiveMsg:(AVIMTypedMessage *)msg conv:(AVIMConversation *)conv {
    
    //    [_storage insertRoomWithConvid:conv.conversationId];
    //    [_storage insertMsg:msg];
    //    [_storage incrementUnreadWithConvid:conv.conversationId];
    //    [_notify postMsgNotify:msg];
    //    NSDictionary *dict4msg = msg.attributes;
    //    NSLog(@"conv.creator:%@", conv.creator);
    //    NSLog(@"conv.creator:%d", conv.type);
    //    NSLog(@"msg.clientId:%@", msg.clientId);
    
    [self fecthConvWithId:conv.conversationId callback:^(AVIMConversation *conversation, NSError *error) {
        if (error) {
            [NSException raise:@"IM" format:@"获取系统对话对象失败"];
        } else {
            
            //缓存对话
            //            if ([self lookupConvById:conv.conversationId] == nil) {
            //                [cachedConvs setObject:conversation forKey:conv.conversationId];
            //            }
            
            [_storage insertRoomWithConvid:conversation.conversationId AndType:conversation.type];
            [_storage insertMsg:msg AndType:conversation.type];
            
            
            if ([CDChatRoomVC getConvidInChatRoom]) {
                NSString *convidInChat = [CDChatRoomVC getConvidInChatRoom];
                if (![convidInChat isEqualToString:conversation.conversationId]) {
                    [_storage incrementUnreadWithConvid:conversation.conversationId AndType:conversation.type];
                }
                else{
                    [UIApplication sharedApplication].applicationIconBadgeNumber-=1;
                }
            } else {
                [_storage incrementUnreadWithConvid:conversation.conversationId AndType:conversation.type];
            }
            
            NSDictionary *dict = msg.attributes;
            NSString *msgTypeStr = [dict objectForKey:MSG_ATTR_TYPE];
            int msgType = [msgTypeStr intValue];
            
            switch (msgType) {
                case MasterDismiss:
                    [_storage deleteRoomByConvid:conversation.name];
                    break;
                case MasterMoveOut:
                    [_storage deleteRoomByConvid:conversation.name];
                    break;
                case MasterAccept: {
                    //申请者显示
                    NSString *attrId = [dict objectForKey:MSG_ATTR_ID];
                    [_storage insertRoomWithConvid:attrId AndType:CDConvTypeGroup];
                }
                    break;
                default:
                    break;
            }
            
            [_notify postMsgNotify:msg];
        }
    }];
}

#pragma mark - AVIMClientDelegate

- (void)imClientPaused:(AVIMClient *)imClient {
    [self updateConnectStatus];
}

- (void)imClientResuming:(AVIMClient *)imClient {
    [self updateConnectStatus];
}

- (void)imClientResumed:(AVIMClient *)imClient {
    [self updateConnectStatus];
}

#pragma mark - status

- (void)updateConnectStatus {
    self.connect = self.imClient.status == AVIMClientStatusOpened;
}

#pragma mark - AVIMMessageDelegate

- (void)conversation:(AVIMConversation *)conversation didReceiveCommonMessage:(AVIMMessage *)message {
    DLog();
}

- (void)conversation:(AVIMConversation *)conversation didReceiveTypedMessage:(AVIMTypedMessage *)message {
    DLog();
    if (message.messageId) {
        [self receiveMsg:message conv:conversation];
    }else {
        DLog(@"Receive Message , but MessageId is nil");
    }
}

- (void)conversation:(AVIMConversation *)conversation messageDelivered:(AVIMMessage *)message {
    DLog();
    if (message != nil) {
        [_storage updateStatus:AVIMMessageStatusDelivered byMsgId:message.messageId];
        [_notify postMsgNotify:(AVIMTypedMessage *)message];
    }
}

- (void)conversation:(AVIMConversation *)conversation membersAdded:(NSArray *)clientIds byClientId:(NSString *)clientId {
    DLog();
}

- (void)conversation:(AVIMConversation *)conversation membersRemoved:(NSArray *)clientIds byClientId:(NSString *)clientId {
    DLog();
}

- (void)conversation:(AVIMConversation *)conversation invitedByClientId:(NSString *)clientId {
    DLog();
}

- (void)conversation:(AVIMConversation *)conversation kickedByClientId:(NSString *)clientId {
    DLog();
}

- (id)convSignWithSelfId:(NSString *)selfId convid:(NSString *)convid targetIds:(NSArray *)targetIds action:(NSString *)action {
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    [dict setObject:selfId forKey:@"self_id"];
    if (convid) {
        [dict setObject:convid forKey:@"convid"];
    }
    if (targetIds) {
        [dict setObject:targetIds forKey:@"targetIds"];
    }
    if (action) {
        [dict setObject:action forKey:@"action"];
    }
    return [AVCloud callFunction:@"conv_sign" withParameters:dict];
}

- (AVIMSignature *)getAVSignatureWithParams:(NSDictionary *)fields peerIds:(NSArray *)peerIds {
    AVIMSignature *avSignature = [[AVIMSignature alloc] init];
    NSNumber *timestampNum = [fields objectForKey:@"timestamp"];
    long timestamp = [timestampNum longValue];
    NSString *nonce = [fields objectForKey:@"nonce"];
    NSString *signature = [fields objectForKey:@"signature"];
    
    [avSignature setTimestamp:timestamp];
    [avSignature setNonce:nonce];
    [avSignature setSignature:signature];
    return avSignature;
}

- (AVIMSignature *)signatureWithClientId:(NSString *)clientId
                          conversationId:(NSString *)conversationId
                                  action:(NSString *)action
                       actionOnClientIds:(NSArray *)clientIds {
    if ([action isEqualToString:@"open"] || [action isEqualToString:@"start"]) {
        action = nil;
    }
    if ([action isEqualToString:@"remove"]) {
        action = @"kick";
    }
    if ([action isEqualToString:@"add"]) {
        action = @"invite";
    }
    NSDictionary *dict = [self convSignWithSelfId:clientId convid:conversationId targetIds:clientIds action:action];
    if (dict != nil) {
        return [self getAVSignatureWithParams:dict peerIds:clientIds];
    }
    else {
        return nil;
    }
}

#pragma mark - File Utils

- (NSString *)getFilesPath {
    NSString *appPath = [NSSearchPathForDirectoriesInDomains(NSDocumentationDirectory, NSUserDomainMask, YES) objectAtIndex:0];
    NSString *filesPath = [appPath stringByAppendingString:@"/files/"];
    NSFileManager *fileMan = [NSFileManager defaultManager];
    NSError *error;
    BOOL isDir = YES;
    if ([fileMan fileExistsAtPath:filesPath isDirectory:&isDir] == NO) {
        [fileMan createDirectoryAtPath:filesPath withIntermediateDirectories:YES attributes:nil error:&error];
        if (error) {
            [NSException raise:@"error when create dir" format:@"error"];
        }
    }
    return filesPath;
}

- (NSString *)getPathByObjectId:(NSString *)objectId {
    return [[self getFilesPath] stringByAppendingFormat:@"%@", objectId];
}

- (NSString *)tmpPath {
    return [[self getFilesPath] stringByAppendingFormat:@"tmp"];
}

- (NSString *)uuid {
    NSString *chars = @"abcdefghijklmnopgrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    assert(chars.length == 62);
    int len = (int)chars.length;
    NSMutableString *result = [[NSMutableString alloc] init];
    for (int i = 0; i < 24; i++) {
        int p = arc4random_uniform(len);
        NSRange range = NSMakeRange(p, 1);
        [result appendString:[chars substringWithRange:range]];
    }
    return result;
}

#pragma mark - conv cache
- (AVIMConversation *)lookupConvById:(NSString *)convid {
    return [cachedConvs valueForKey:convid];
}

- (void)registerConvs:(NSArray *)convs {
    for (AVIMConversation *conv in convs) {
        [cachedConvs setValue:conv forKey:conv.conversationId];
    }
}

#pragma mark - user cache
- (AVObject *)lookupUserById:(NSString *)objectId {
    return [cachedUserDict valueForKey:objectId];
}

- (void)registerUser:(AVObject *)user {
    [cachedUserDict setObject:user forKey:user.objectId];
}

- (void)cacheConvsWithIds:(NSMutableSet *)convidSet callback:(AVArrayResultBlock)callback {
    NSMutableSet *uncacheConvids = [[NSMutableSet alloc] init];
    for (NSString *convid in convidSet) {
        if ([self lookupConvById:convid] == nil) {
            [uncacheConvids addObject:convid];
        }
    }
    
    if (uncacheConvids.count>0) {
        [self fetchConvsWithConvids:uncacheConvids callback: ^(NSArray *objects, NSError *error) {
            if (error) {
                callback(nil, error);
            }else {
                [self registerConvs:objects];
                callback(objects, nil);
            }
        }];
    } else {
        callback(nil,nil);
    }
}

- (void)findRecentRoomsWithBlock:(AVArrayResultBlock)block {
    NSMutableArray *rooms = [[self.storage getRooms] mutableCopy];
    
    //恢复云端对话
    if(rooms.count == 0) {
        CDIM *im = [CDIM sharedInstance];
        NSString *clientId = [im imClient].clientId;
        NSLog(@"[im imClient].clientId: %@", [im imClient].clientId);
        [im fetchGroupConvsWithClientId:clientId callback:^(NSMutableArray *conversations, NSError *error) {
            for(AVIMConversation *conv in conversations ) {
                //[_storage insertRoomWithConvid:conv.conversationId];
                [_storage insertRoomWithConvid:conv.conversationId AndType:CDConvTypeGroup];//群组
            }
            [rooms addObjectsFromArray:conversations];
        }];
    }
    
    NSMutableSet *convids = [NSMutableSet set];
    for (CDRoom *room in rooms) {
        //if (room.type == CDConvTypeGroup || room.type == CDConvTypeSystem) {
        if (room.type == CDConvTypeGroup) {
            [convids addObject:room.convid];
        }
    }
    
    //系统消息对话
    NSArray *arr = [self queryMsgsWithConvType:CDConvTypeSystem];
    for (AVIMTypedMessage *msg in arr) {
        NSDictionary *dict = msg.attributes;
        NSString *realConvid = [dict objectForKey:MSG_ATTR_REAL_CONVID];
        [convids addObject:realConvid];
    }
    
    //    NSArray *arr2 = [self queryMsgsWithConvType:CDConvTypeSystemGuest2Master];
    //    for (AVIMTypedMessage *msg in arr2) {
    //        NSDictionary *dict = msg.attributes;
    //        NSString *realConvid = [dict objectForKey:@"realConvid"];
    //        [convids addObject:realConvid];
    //    }
    
    [self cacheConvsWithIds:convids callback:^(NSArray *objects, NSError *error) {
        if (error) {
            block(nil, error);
        } else {
            NSMutableArray *filterRooms = [NSMutableArray array];
            for (CDRoom *room in rooms) {
                if (room.type ==CDConvTypeGroup) {
                    
                    //排除已删对话
                    room.conv = [self lookupConvById:room.convid];
                    
                    if (room.conv) {
                        [filterRooms addObject:room];
                    } else {
                        //[NSException raise:@"IM" format:@"conv is nil"];
                        NSLog(@"对话不存在，可能是云端被删除");
                    }
                } else {
                    [filterRooms addObject:room];
                }
            }
            
            //            NSMutableSet *userIds = [NSMutableSet set];
            //            for (CDRoom *room in filterRooms) {
            //                if (room.type == CDConvTypeSingle) {//单聊
            //                    [userIds addObject:room.conv.otherId];
            //                }
            //            }
            
            //缓存用户
            //            [[weakSelf imConfig].userDelegate cacheUserByIds:userIds block: ^(BOOL succeeded, NSError *error) {
            //                if (error) {
            //                    block(nil, error);
            //                }else {
            //                    block(filterRooms, error);
            //                }
            //            }];
            
            block(filterRooms, error);
        }
    }];
}

- (BOOL)updateMsgConfirmStatusByMsgId:(NSString *)msgId {
    return [self.storage updateMsgConfirmStatusByMsgId:msgId];
}

@end
